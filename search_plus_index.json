{"./":{"url":"./","title":"Gitbook update with Travis CI on Github Pages","keywords":"","body":"Introduction Gitbook is great for writing books, however, if you want to share it with others, you need a server and a domain name. This undoubtedly requires the cost of money. We can use GitHub Pages to solve this. GitHub provides GitHub Pages services for all repositories. And since Gitbook almost stops open source maintenance, I don't want to install it on my mac. I tried to install Gitbook via Docker, but Docker consumes too much resources (about 1.5G of RAM) and I don't want to make writing so complicated. So I will compile my markdown file to a static web page file via Travis through an automatic compilation method. Not recommended, take up too high cpu Example "},"Environment.html":{"url":"Environment.html","title":"Environment","keywords":"","body":"Outline git installation Atom installation Git Installation install Homebrew by using commond: /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" and using Homebrew to install git: brew install git No need to update. It will update automatically before any installation. Atom Installation \bGo to the Atom to download the latest version. And also install essential packages: language-markdown markdown-preview-enhanced markdown-table-editor "},"Git-Build.html":{"url":"Git-Build.html","title":"Gitbook Project Build","keywords":"","body":"Outline Gitbook essential document git initialization GitHub tocken Gitbook Essential Document There are two essential files SUMMARY.md and README.md to build gitbook project. We need to create these files before build. Find the place where you want to write a book, you can also create a new project folder: mkdir and then create files SUMMARY.md and README.md. content in SUMMARY.md * [README](README.md) content in README.md # This is my firt markdown Git Initialization Enter folder through the terminal. git init git add . git commit -m \"Basic gitbook files\" GitHub Tocken \bWe need GITHUB_TOKEN for Travis to build gitbook. So we generate one in Personal access tokens.(or you can go Settings -> Developer settings -> Personal access tokens to generate one). And make sure click every selection. Copy the token we generated for later use. "},"Travis-Setting.html":{"url":"Travis-Setting.html","title":"Travis Setting","keywords":"","body":"Outline sign in Travis manage Travis settings Sign in Travis You can register for an account on Travis and bind to GitHub. Manage Travis Settings Create a new repository by click + to choose the repository we pushed before. After that we need to set this repository by entering into the settings section. There are a few environmen variables we need to add. CUSTOM_DOMAIN is optional, GIT_EMAIL is your GitHub email, GIT_NAME is your GitHub name , GITHUB_TOKEN is the GitHub token we generated before. Remember to disable the Display value in build log at the bottom "},"Travis-Build.html":{"url":"Travis-Build.html","title":"Travis Build","keywords":"","body":"Outline gitbook-building script project upload Travis build gitbook Gitbook-building Script Enter folder through the terminal, and generate travis setting fileï¼š cd nano .travis.yml language: node_js node_js: - \"8\" cache: directories: - $HOME/.npm before_install: - export TZ='Asia/Shanghai' install: - npm install gitbook-cli -g - gitbook install script: - gitbook build . ./build branches: only: - master deploy: provider: pages skip_cleanup: true github_token: $GITHUB_TOKEN local_dir: build name: $GIT_NAME email: $GIT_EMAIL on: branch: master Project Upload After generating the travis setting file, we need to push it on GitHub. git add .travis.yml git commit -m \"Travis setting file\" git push Travis Build Gitbook Enter our repository in Travis and build our repository. It will use our setting file .travis.yml to build the gitbook website. If everything goes well, it should be in green. "},"GitHub-Pages.html":{"url":"GitHub-Pages.html","title":"GitHub Pages","keywords":"","body":"Open GitHub Pages GitHub provides GitHub Pages services for all repositories. You can open it in the following way: open a repository go to repository's settings scroll down to find 'GitHub Pages' check whether source gh-pages branch Enjoy write your own notes or manual. "},"Bug.html":{"url":"Bug.html","title":"Bug","keywords":"","body":"Bugs Push and build successfully, but the web didn't change. Modifing every file to make some changes, and push again. Travis will automatially build gitbook on every commitment. "}}